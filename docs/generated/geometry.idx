Vec2	geometry.html#Vec2	geometry: Vec2	
Point2D	geometry.html#Point2D	geometry: Point2D	
Point2DInt	geometry.html#Point2DInt	geometry: Point2DInt	
PointGraph	geometry.html#PointGraph	geometry: PointGraph	
Line	geometry.html#Line	geometry: Line	
LineSegment	geometry.html#LineSegment	geometry: LineSegment	
SegmentSet	geometry.html#SegmentSet	geometry: SegmentSet	
`+`	geometry.html#+,Vec2[N: SomeNumber],Vec2[N: SomeNumber]	geometry: `+`[N: SomeNumber](p1, p2: Vec2[N]): Vec2[N]	
`+`	geometry.html#+,Vec2,N	geometry: `+`[N: SomeNumber](p: Vec2; n: N): Vec2[N]	
`-`	geometry.html#-,Vec2[N: SomeNumber],Vec2[N: SomeNumber]	geometry: `-`[N: SomeNumber](p1, p2: Vec2[N]): Vec2[N]	
`-`	geometry.html#-,Vec2,N	geometry: `-`[N: SomeNumber](p: Vec2; n: N): Vec2[N]	
`-`	geometry.html#-,Vec2[N: SomeNumber]	geometry: `-`[N: SomeNumber](p: Vec2[N]): Vec2[N]	
`*`	geometry.html#*,Vec2[N: SomeNumber],Vec2[N: SomeNumber]	geometry: `*`[N: SomeNumber](p1, p2: Vec2[N]): Vec2[N]	
`/`	geometry.html#/,Vec2[N: SomeNumber],Vec2[N: SomeNumber]	geometry: `/`[N: SomeNumber](p1, p2: Vec2[N]): Vec2[N]	
`*`	geometry.html#*,Vec2[V: SomeNumber],S	geometry: `*`[V: SomeNumber; S: SomeNumber](p: Vec2[V]; n: S): Vec2[V]	
`/`	geometry.html#/,Vec2[V: SomeNumber],S	geometry: `/`[V: SomeNumber; S: SomeNumber](p: Vec2[V]; n: S): Vec2[V]	
midpoint	geometry.html#midpoint,varargs[Vec2[N: SomeNumber]]	geometry: midpoint[N: SomeNumber](vectors: varargs[Vec2[N]]): Vec2[N]	
avg	geometry.html#avg,varargs[N]	geometry: avg[N: SomeNumber](numbers: varargs[N]): N	
dist	geometry.html#dist,N,N	geometry: dist[N: SomeNumber](n1, n2: N): N	
toInt	geometry.html#toInt,Point2D	geometry: toInt(p: Point2D): Point2DInt	
toFloat	geometry.html#toFloat,Point2DInt	geometry: toFloat(p: Point2DInt): Point2D	
len	geometry.html#len,Vec2[N: SomeNumber]	geometry: len[N: SomeNumber](p: Vec2[N]): float	
toUnitVec	geometry.html#toUnitVec,Vec2[N: SomeNumber]	geometry: toUnitVec[N: SomeNumber](p: Vec2[N]): Vec2[N]	
rotateAroundOrigin	geometry.html#rotateAroundOrigin,Vec2[N: SomeNumber],float	geometry: rotateAroundOrigin[N: SomeNumber](p: Vec2[N]; angle: float): Vec2[N]	
`$`	geometry.html#$,Vec2[N: SomeNumber]	geometry: `$`[N: SomeNumber](p: Vec2[N]): string	
`$`	geometry.html#$,LineSegment	geometry: `$`(s: LineSegment): string	
`$`	geometry.html#$,Line	geometry: `$`(line: Line): string	
isDiagonal	geometry.html#isDiagonal,Vec2[N: SomeNumber]	geometry: isDiagonal[N: SomeNumber](p: Vec2[N]): bool	
gridPoints	geometry.html#gridPoints.i,Vec2[float],Vec2[float]	geometry: gridPoints(p1, p2: Vec2[float]): Vec2[float]	
adjacentGridPoints	geometry.html#adjacentGridPoints.i,Vec2[float]	geometry: adjacentGridPoints(p: Vec2[float]): Vec2[float]	
addGridPoints	geometry.html#addGridPoints,PointGraph,Vec2[float],Vec2[float]	geometry: addGridPoints(g: var PointGraph; p1, p2: Vec2[float])	
connectGridPoints	geometry.html#connectGridPoints,PointGraph,Vec2[float],Vec2[float]	geometry: connectGridPoints(g: var PointGraph; p1, p2: Vec2[float])	
combine	geometry.html#combine,LineSegment,LineSegment	geometry: combine(edge1, edge2: LineSegment): LineSegment	
`-&gt;`	geometry.html#->,Point2D,Point2D	geometry: `-&gt;`(a, b: Point2D): Line	
`-&gt;`	geometry.html#->,Line,Point2D	geometry: `-&gt;`(a: Line; b: Point2D): Line	
segments	geometry.html#segments.i,Line	geometry: segments(line: Line): LineSegment	
inAscOrder	geometry.html#inAscOrder,LineSegment	geometry: inAscOrder(segment: LineSegment): LineSegment	
toSetOfSegments	geometry.html#toSetOfSegments,Line	geometry: toSetOfSegments(l: Line): SegmentSet	
parsePoint	geometry.html#parsePoint,string	geometry: parsePoint(pointStr: string): Option[Point2D]	
